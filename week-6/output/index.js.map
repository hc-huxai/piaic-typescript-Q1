{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA,IAAI,6BAAO,IAAI,kBAAkB;AAEjC;;;;;;;;CAQC,GAEA,qFAAqF;AAEtF,SAAS,6BAAO,MAAM;IAEpB,SAAS,UAAU,CAAC;IACpB,IAAI,SAAS,OAAO;IACpB,IAAI,MAAM,OAAO;IACjB,IAAI,eAAe,OAAO,eACxB,OAAO,gBAAgB;QAAW,OAAO,EAAE;IAAA;IAC7C,IAAI,UAAU,OAAO;IACrB,OAAO,UAAU,WAAW;QAAC,MAAM,YAAW;IAAC;IAC/C,OAAO,OAAO,SAAU,GAAG;QAAI,OAAO,OAAO,KAAK;YAAC,MAAM;QAAE;IAAG;IAE9D,OAAO;IAGP;;;;;;;;;;;;;GAaC,GAGD,SAAS,OAAO,GAAG,EAAE,KAAK,EAAE,IAAI;QAC9B,IAAI,SAAS,GAAG,cAAc,GAAG,KAAK,GAAG;QACzC,OAAO,QAAQ,CAAC;QAEhB,IAAI,OAAO,SAAS,KAAK;YACvB,OAAO;YACP,MAAM,KAAK;QACb,OAAO,IAAI,OAAO,WAAW,OAAO;YAClC,OAAO;YACP,QAAQ,KAAK;QACf;QACA,MAAM,OAAO;QACb,IAAI,OAAO,KAAK;QAChB,IAAI,SAAS,UAAU;QACvB,eAAe,KAAK,gBAAgB;QAEpC,IAAI,KAAK,AAAC,4BAAqB,UAC7B,qBAAc,KACd,mBAAY,YAAY;QAE1B,IAAI,SAAS,qBAAc;QAC3B,IAAI,CAAC,QAAU,qBAAc,cAAc,qBAAc,WAAW;QAEpE,IAAI,MAAM,iCAAO,MAAM;QACvB,IAAI,MAAM,IAAI,WAAW;QAEzB,WAAW;QAEX,IAAI,KACF,sBAAe,MAAM;QAGvB,IAAI,QAAQ;QACZ,IAAI;QAEJ,MAAO,KAAM;YACX,OAAO,mBAAY,IAAI,KAAK,GAAG;YAC/B,IAAI,OAAO,GAAG;gBACZ,OAAO,IAAI;oBACT,KAAK;wBACH,IAAI,QAAQ;wBACZ,IAAI,CAAC,SAAS;wBACd,IAAI,QAAQ,WAAW;wBAEvB,IAAI,QAAQ,SAAS;4BACnB,WAAW;4BACX,cAAc;wBAChB;wBACA,MAAM,QAAQ;wBACd,SAAS,IAAI;wBACb,sBAAe,MAAM,mBAAuB,MAAM;wBAClD;oBACF,KAAK;wBACH,IAAI,QAAQ;wBACZ,IAAI,CAAC,SAAS;wBACd,IAAI,QAAQ,WAAW;wBAEvB,IAAI,QAAQ,iBAAiB;4BAC3B,MAAM;4BACN,SAAS;4BACT,QAAQ;wBACV,OAAO;4BACL,MAAM,QAAQ;4BACd,SAAS,IAAI;wBACf;wBACA,sBAAe,MAAM,mBAAsB,MAAM,MAAM,UAAW,CAAA,SAAO,IAAI,SAAO,CAAA,IAAG;wBACvF;oBACF,KAAK;wBACH,IAAI,QAAQ;wBACZ,IAAI,SAAS;wBACb,SAAS,AAAC,EAAE,SAAS,IAAK,IAAI;wBAC9B,IAAI,SAAS,QACX,sBAAe,MAAM;wBACvB;oBACF,KAAK;wBACH,IAAI,QAAQ;wBACZ,SAAS,AAAC,EAAE,SAAS,IAAI,SAAU,IAAI,SAAS;wBAChD,sBAAe,MAAM,UAAa,CAAA,SAAO,IAAI,SAAO,CAAA,IAAK;wBACzD;oBACF;wBACE,IAAI,IAAI,YAAY;4BAClB,MAAM,MAAM,IAAI;4BAChB,MAAM,IAAI,QAAQ,OAAO;4BACzB,SAAS,IAAI;4BACb,YAAY,QAAQ,KAAK,MAAM,KAAK;4BACpC,sBAAe,MAAM,UAAa,CAAA,SAAO,IAAI,SAAO,CAAA,IAAK;4BACzD,MAAM,iCAAO,MAAM;wBACrB;gBACJ;gBACA,UAAU,4CAA4C;YACxD;YAEA,0EAA0E;YAC1E,YAAY,GAAG,CAAC,OAAK,EAAE;YAEvB,6BAA6B;YAC7B,IAAI,aAAa,GAAE;gBACjB,sBAAe,MAAM;gBACrB,oBAAa;gBAEb,IAAI,QAAQ,oBAAa;gBAEzB,qBAAc,cAAc,qBAAc,WAAW;gBAErD,OAAO;YACT;YAEA,sBAAsB;YACtB,IAAI,aAAa,GACf;gBAAA,IAAI,IAAI,UAAU,KAAK,KAAK;oBAC1B,sBAAe,MAAM;oBACrB,oBAAa;gBACf;YAAA;YAGF,kCAAkC;YAClC,IAAI,aAAa,4BAAM;gBACrB,oBAAa;gBACb,IAAI,CAAC,SAAS;gBACd,IAAI,CAAC,UAAU,IAAI,QAAQ,QAAQ,KAAK;gBACxC,QAAQ;gBACR;YACF;YAEA,yCAAyC;YACzC,IAAI,aAAa,GAAG;gBAClB,MAAM,aAAa;gBAEnB,IAAI,OAAO,GAAG,CAAC,EAAE,EACf,MAAM,aAAa;qBAEnB,eAAe,IAAI;gBAGrB,IAAI,IAAI,UAAU,GAAG;oBACnB,sBAAe,MAAM;oBACrB;gBACF;gBAEA,IAAI,OAAO,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,GAAG,QAAQ;gBAElD,IAAI,MAAM;oBACR,sBAAe,MAAM,aAAe,MAAM;oBAC1C,MAAM;oBACN,SAAS,KAAK;gBAChB;YACF;YAEA,IAAI,aAAa,OAAQ,2BAAoB,WAAW,aAAa,GAAI;gBACvE,IAAI,CAAC,QAAQ;gBACb,MAAM,IAAI,MAAM,GAAG,SAAO,KAAK,IAAI,MAAM;gBACzC;gBACA,sBAAe,MAAM;YACvB,OAAO;gBACL,IAAI,AAAC,YAAY,MAAS,YAAY,KAClC;gBACJ,MAAM,IAAI,MAAM,GAAG,UAAU,OAAO,aAAa,aAAa,IAAI,MAAM;gBACxE;YACF;YAEA,YAAY,QAAQ,KAAK,MAAM,KAAK;QAEtC;QAEA,sBAAe,MAAM;QAErB,qBAAc,cAAc,qBAAc,WAAW;QAErD,OAAO,OAAO,SAAS;IACzB;IAGA,SAAS,YAAY,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM;QACjD,IAAI,QACA,sBAAe,MAAM,mBAAuB,MAAM,MAAM,IAAI,SAAO,GAAG,KAAK;aACxE;YACL,sBAAe,MAAM;YACrB,IAAI,UAAU,IAAI,QACd,sBAAe,MAAM,mBAAsB,MAAM;iBAEnD,IAAI,KACF,sBAAe,MAAM,mBAAsB,MAAM;iBAEjD,sBAAe,MAAM,mBAAsB,MAAM,UAAa,CAAA,IAAI,SAAS,MAAK,IAAK;YAIzF,4DAA4D;YAC5D,IAAI,YAAY,OAAU,KAAK;YAC/B,sBAAe,MAAM,CAAC,OAAO,EAAE,YAAU,IAAG,CAAA,QAAM,KAAI,IAAE,MAAK,EAAG,CAAC,CAAC;QACpE;IACF;AACF;AAEA,iBAAiB;;;;AClPjB;;;AAGA,MAAM,kCAAY,CAAA,SAAU,OAAO,WAAW,WAAW,OAAO,QAAQ,UAAa,MAAM;AAE3F,iBAAiB;AACjB,eAAe,UAAU;;;;ACNzB;AAEA,iBAAiB,CAAA;IAChB,UAAU,OAAO,OAAO;QACvB,WAAW;IACZ,GAAG;IAEH,MAAM,UAAU;QACf;QACA;KACA,CAAC,KAAK;IAEP,OAAO,IAAI,OAAO,SAAS,QAAQ,YAAY,YAAY;AAC5D;;;;;;AGbA,2GAA2G;AAE3G,qCAAqC;AACrC,0BAA0B;AAC1B,2GAA2G;AAC3G,2DAA2D;AAE3D,mCAAmC;AACnC,6FAA6F;AAC7F,kDAAkD;AETlD,MAAM,+BAAS,CAAC;IACd,IAAI,eAAe,WACjB,QAAQ;SAER,IAAK,IAAI,IAAI,GAAG,KAAK,aAAa,IAChC,QAAQ;AAGd;IAEA,2CAAe;;;;ACVf,MAAM,iCAAW,yBAAuB;IAAE,QAAQ;AAAK;IAEvD,2CAAe;;;;;AHUf,MAAM,mCAAa;IACjB,IAAI,SAAiB,CAAC,CAAA,GAAA,wCAAO,EAAE;IAC/B,IAAI,QAAQ;IACZ,MAAO,CAAC,MACN,IAAI,OAAO,UAAU,SACnB,QAAQ;SAER,SAAS,CAAA,GAAA,wCAAO,EAAE;IAItB,IAAI,MAAc;IAElB,IACE,IAAI,IAAI,GACR,SAAS,IAAI,KAAK,SAAS,KAAK,QAChC,SAAS,IAAI,MAAM,IAEnB,IAAI,IAAI,KAAK,GAAG,OAAO;IAGzB,CAAA,GAAA,wCAAK;IAEL,QAAQ,IACN,CAAC,4BAA4B,EAAE,SAAS,IAAI,SAAS,EAAE,KAAK,EAC1D,SAAS,IAAI,SAAS,EACvB,GAAG,CAAC;IAEP,QAAQ,IAAI;AACd;IAEA,iEAAiE;AACjE,gBAAgB;AAEhB,2CAAe;;;AI9Cf,8HAA8H;AAE9H,qCAAqC;AACrC,0BAA0B;AAC1B,2GAA2G;AAC3G,2DAA2D;AAE3D,mCAAmC;AACnC,6FAA6F;AAC7F,kDAAkD;;AAGlD,MAAM,mCAAa,CAAC;IAClB,kBAAkB;IAClB,QAAQ,IAAI,CAAC,WAAW,CAAC;IACzB,QAAQ,IAAI,CAAC,mBAAmB,CAAC;IACjC,QAAQ,IAAI,CAAC,0BAA0B,CAAC;IAExC,CAAA,GAAA,wCAAK;IAEL,2HAA2H;IAC3H,IAAI,SAAc,CAAC,CAAA,GAAA,wCAAO,EAAE;IAC5B,IAAI,SAAmB,EAAE;IAEzB,oDAAoD;IACpD,MAAO,UAAU,MAAM,SAAS,KAAK,SAAS,EAC5C,SAAS,CAAC,CAAA,GAAA,wCAAO,EAAE;IAGrB,2BAA2B;IAC3B,IAAI,UAAU,GAAG;QACf,QAAQ,IAAI,CAAC,2CAA2C,CAAC;QAEzD,uDAAuD;QACvD,6BAA6B;QAC7B,2FAA2F;QAC3F,CAAA,GAAA,wCAAO,IACJ,MAAM,KACN,QAAQ,CAAC;YACR,IAAI,CAAC,MAAM,OAAO,WAChB,OAAO,KAAK,OAAO;QAEvB;QAEF,wCAAwC;QACxC,qDAAqD;QACrD,MAAO,OAAO,UAAU,EAAG;YACzB,QAAQ,IAAI,CAAC,2CAA2C,CAAC;YACzD,CAAA,GAAA,wCAAO,IACJ,MAAM,KACN,QAAQ,CAAC;gBACR,IAAI,CAAC,MAAM,OAAO,WAChB,OAAO,KAAK,OAAO;YAEvB;QACJ;IACF,OACE,2BAA2B;IAE3B,SAAS;IAGX,QAAQ,IAAI,CAAC,gBAAgB,CAAC;IAC9B,QAAQ,IAAI;IAEZ,CAAA,GAAA,wCAAK;IACL,QAAQ,IAAI,CAAC,aAAa,CAAC;IAE3B,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IACjC,IAAI,MAAM,CAAC,EAAE,GAAG,KAAK,GACnB,QAAQ,IAAI,MAAM,CAAC,EAAE;AAG3B;IAEA,iEAAiE;AACjE,sDAAsD;AAEtD,2CAAe;;;AC9Ef,kKAAkK;AAElK,qCAAqC;AACrC,0BAA0B;AAC1B,2GAA2G;AAC3G,2DAA2D;;AAG3D,MAAM,mCAAa,CAAC;IAClB,QAAQ,IAAI,CAAC,QAAQ,CAAC;IACtB,QAAQ,IAAI,CAAC,kBAAkB,CAAC;IAChC,QAAQ,IAAI,CAAC,yBAAyB,CAAC;IAEvC,IAAI,SAAmB,EAAE;IAEzB,IAAI,SAAiB,CAAC,CAAA,GAAA,wCAAO,EAAE;IAE/B,wEAAwE;IACxE,MAAO;QAAC;QAAG;KAAE,CAAC,QAAQ,WAAW,GAC/B,SAAS,CAAC,CAAA,GAAA,wCAAO,EAAE;IAGrB,kBAAkB;IAClB,IAAI,UAAU,GAAG;QACf,QAAQ,IAAI,CAAC,2CAA2C,CAAC;QAEzD,uDAAuD;QACvD,6BAA6B;QAC7B,2FAA2F;QAC3F,CAAA,GAAA,wCAAO,IACJ,MAAM,KACN,QAAQ,CAAC;YACR,IAAI,CAAC,MAAM,OAAO,WAChB,OAAO,KAAK,OAAO;QAEvB;QAEF,wCAAwC;QACxC,qDAAqD;QACrD,MAAO,OAAO,UAAU,EAAG;YACzB,QAAQ,IAAI,CAAC,2CAA2C,CAAC;YACzD,CAAA,GAAA,wCAAO,IACJ,MAAM,KACN,QAAQ,CAAC;gBACR,IAAI,CAAC,MAAM,OAAO,WAChB,OAAO,KAAK,OAAO;YAEvB;QACJ;IACF,OACE,+CAA+C;IAC/C,SAAS;IAGX,QAAQ,IAAI,CAAC,iBAAiB,CAAC,EAAE;IAEjC,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IACjC,IAAI,MAAM,CAAC,EAAE,GAAG,KAAK,GAAG;QACtB,OAAO,OAAO,GAAG;QACjB;IACF;IAGF,QAAQ,IAAI,CAAC,0BAA0B,CAAC,EAAE;AAC5C;IAEA,iEAAiE;AACjE,sDAAsD;AAEtD,2CAAe;;;ACrEf,0JAA0J;AAE1J,qCAAqC;AACrC,0BAA0B;AAC1B,2GAA2G;AAC3G,2DAA2D;AAE3D,mCAAmC;AACnC,6FAA6F;AAC7F,kDAAkD;;AAGlD,MAAM,mCAAa;IACjB,QAAQ,IAAI,CAAC,2CAA2C,CAAC;IACzD,IAAI,SAAiB,CAAC,CAAA,GAAA,wCAAO;IAE7B,MAAO,CAAC,MAAM,WAAW,SAAS,EAAG;QACnC,QAAQ,IAAI,CAAC,oBAAoB,CAAC;QAClC,SAAS,CAAC,CAAA,GAAA,wCAAO;IACnB;IAEA,IAAI,OAAe,OAAO,AAAC,CAAA,KAAK,KAAK,SAAS,MAAK,EAAG,QAAQ;IAE9D,CAAA,GAAA,wCAAK;IAEL,QAAQ,IAAI,CAAC,2BAA2B,EAAE,OAAO,GAAG,CAAC,EAAE;AACzD;IAEA,iEAAiE;AACjE,gBAAgB;AAEhB,2CAAe;;;AC/Bf,+HAA+H;AAE/H,qCAAqC;AACrC,0BAA0B;AAC1B,2GAA2G;AAC3G,2DAA2D;AAE3D,mCAAmC;AACnC,6FAA6F;AAC7F,kDAAkD;;AAGlD,MAAM,mCAAa,CAAC;IAClB,QAAQ,IAAI,CAAC,QAAQ,CAAC;IACtB,QAAQ,IAAI,CAAC,kBAAkB,CAAC;IAChC,QAAQ,IAAI,CAAC,yBAAyB,CAAC;IAEvC,IAAI,SAAmB,EAAE;IAEzB,IAAI,SAAiB,CAAC,CAAA,GAAA,wCAAO,EAAE;IAE/B,wEAAwE;IACxE,MAAO;QAAC;QAAG;KAAE,CAAC,QAAQ,WAAW,GAC/B,SAAS,CAAC,CAAA,GAAA,wCAAO,EAAE;IAGrB,kBAAkB;IAClB,IAAI,UAAU,GAAG;QACf,QAAQ,IAAI,CAAC,2CAA2C,CAAC;QAEzD,uDAAuD;QACvD,6BAA6B;QAC7B,2FAA2F;QAC3F,CAAA,GAAA,wCAAO,IACJ,MAAM,KACN,QAAQ,CAAC;YACR,IAAI,CAAC,MAAM,OAAO,WAChB,OAAO,KAAK,OAAO;QAEvB;QAEF,wCAAwC;QACxC,qDAAqD;QACrD,MAAO,OAAO,UAAU,EAAG;YACzB,QAAQ,IAAI,CAAC,2CAA2C,CAAC;YACzD,CAAA,GAAA,wCAAO,IACJ,MAAM,KACN,QAAQ,CAAC;gBACR,IAAI,CAAC,MAAM,OAAO,WAChB,OAAO,KAAK,OAAO;YAEvB;QACJ;IACF,OACE,+CAA+C;IAC/C,SAAS;IAGX,CAAA,GAAA,wCAAK;IAEL,QAAQ,IAAI,CAAC,cAAc,CAAC,EAAE;IAE9B,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IACjC,IAAI,MAAM,CAAC,EAAE,GAAG,IAAI;QAClB,OAAO,OAAO,GAAG;QACjB;IACF;IAGF,QAAQ,IAAI,CAAC,iBAAiB,CAAC,EAAE;AACnC;IAEA,iEAAiE;AACjE,oCAAoC;AAEpC,2CAAe;;;AC3Ef,+HAA+H;AAE/H,qCAAqC;AACrC,0BAA0B;AAC1B,2GAA2G;AAC3G,2DAA2D;AAE3D,mCAAmC;AACnC,6FAA6F;AAC7F,kDAAkD;;AAGlD,MAAM,mCAAa,CAAC;IAClB,QAAQ,IAAI,CAAC,QAAQ,CAAC;IACtB,QAAQ,IAAI,CAAC,kBAAkB,CAAC;IAChC,QAAQ,IAAI,CAAC,yBAAyB,CAAC;IAEvC,IAAI,SAAmB,EAAE;IAEzB,IAAI,SAAiB,CAAC,CAAA,GAAA,wCAAO,EAAE;IAE/B,wEAAwE;IACxE,MAAO;QAAC;QAAG;KAAE,CAAC,QAAQ,WAAW,GAC/B,SAAS,CAAC,CAAA,GAAA,wCAAO,EAAE;IAGrB,kBAAkB;IAClB,IAAI,UAAU,GAAG;QACf,QAAQ,IAAI,CAAC,yCAAyC,CAAC;QAEvD,uDAAuD;QACvD,6BAA6B;QAC7B,2FAA2F;QAC3F,CAAA,GAAA,wCAAO,IACJ,MAAM,KACN,QAAQ,CAAC;YACR,IAAI,CAAC,MAAM,OAAO,WAChB,OAAO,KAAK,OAAO;QAEvB;QAEF,wCAAwC;QACxC,qDAAqD;QACrD,MAAO,OAAO,UAAU,EAAG;YACzB,QAAQ,IAAI,CAAC,2CAA2C,CAAC;YACzD,CAAA,GAAA,wCAAO,IACJ,MAAM,KACN,QAAQ,CAAC;gBACR,IAAI,CAAC,MAAM,OAAO,WAChB,OAAO,KAAK,OAAO;YAEvB;QACJ;IACF,OACE,+CAA+C;IAC/C,SAAS;IAGX,CAAA,GAAA,wCAAK;IAEL,yCAAyC;IAEzC,4CAA4C;IAC5C,0BAA0B;IAC1B,2BAA2B;IAC3B,WAAW;IACX,MAAM;IACN,IAAI;IAEJ,4CAA4C;IAE5C,QAAQ,IAAI,CAAC,aAAa,CAAC,EAAE;IAE7B,QAAQ,IAAI,CAAC,0BAA0B,EAAE,KAAK,OAAO,QAAQ,CAAC;AAChE;IAEA,iEAAiE;AACjE,oCAAoC;AAEpC,2CAAe;;;;;;;AVrEf,IAAI,kCAA6D;IAC/D;QACE,MAAM;QACN,YAAY,IAAM,CAAA,GAAA,wCAAS;IAC7B;IACA;QACE,MAAM;QACN,YAAY,IAAM,CAAA,GAAA,wCAAS;IAC7B;IACA;QACE,MAAM;QACN,YAAY,IAAM,CAAA,GAAA,wCAAS,EAAE;gBAAC;gBAAI;gBAAI;gBAAK;gBAAK;gBAAI;gBAAG;gBAAI;gBAAI;aAAI;IACrE;IACA;QAAE,MAAM;QAA4B,YAAY,IAAM,CAAA,GAAA,wCAAS;IAAI;IACnE;QACE,MAAM;QACN,YAAY,IAAM,CAAA,GAAA,wCAAS,EAAE;gBAAC;gBAAI;gBAAI;gBAAI;gBAAI;aAAG;IACnD;IACA;QACE,MAAM;QACN,YAAY,IAAM,CAAA,GAAA,wCAAS,EAAE;gBAAC;gBAAI;gBAAI;gBAAI;gBAAI;aAAG;IACnD;CACD;AAED,QAAQ,IAAI,CAAC,0BAA0B,CAAC;AACxC,QAAQ,IAAI,CAAC,iBAAiB,CAAC;AAC/B,QAAQ,IAAI,CAAC,0BAA0B,CAAC;AAExC,gCAAU,QAAQ,CAAC,SAAS;IAC1B,CAAA,GAAA,wCAAK;IACL,QAAQ,IAAI,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;AACjD;AAEA,CAAA,GAAA,wCAAK;AACL,QAAQ,IAAI,CAAC,QAAQ,CAAC;AAEtB,CAAA,GAAA,wCAAK;AACL,IAAI,oCAAc,CAAA,GAAA,wCAAO,EAAE;AAE3B,IAAI,sCACF,qCAAe,OAAQ,qCAAe,KAAK,qCAAe,gCAAU;AAEtE,MAAO,uCAAiB,MACtB,oCAAc,CAAA,GAAA,wCAAO,EAAE;AAGzB,IAAI,oCAAc,qCAAe,CAAC,CAAC,CAAC;AAEpC,MAAO,CAAC,kCAAa;IACnB,QAAQ,IAAI,CAAC,kBAAkB,CAAC;IAChC,QAAQ,IAAI,CAAC,SAAS,EAAE,kCAAY,EAAE,EAAE,+BAAS,CAAC,oCAAc,EAAE,CAAC,KAAK,CAAC;IACzE,QAAQ,IAAI,CAAC,kBAAkB,CAAC;IAEhC,CAAA,GAAA,wCAAK;IACL,+BAAS,CAAC,oCAAc,EAAE,CAAC;IAE3B,CAAA,GAAA,wCAAK,EAAE;IAEP,CAAA,GAAA,wCAAO,EAAE;IAET,CAAA,GAAA,wCAAK;IAEL,QAAQ,IAAI,CAAC,0BAA0B,CAAC;IACxC,QAAQ,IAAI,CAAC,iBAAiB,CAAC;IAC/B,QAAQ,IAAI,CAAC,0BAA0B,CAAC;IAExC,gCAAU,QAAQ,CAAC,SAAS;QAC1B,CAAA,GAAA,wCAAK;QACL,QAAQ,IAAI,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IACjD;IAEA,CAAA,GAAA,wCAAK;IACL,QAAQ,IAAI,CAAC,QAAQ,CAAC;IACtB,oCAAc,CAAA,GAAA,wCAAO,EAAE;IACvB,oCAAc,qCAAe;AAC/B;AAEA,QAAQ,IAAI,CAAC,IAAI,CAAC;AAClB,oBAAa","sources":["node_modules/prompt-sync/index.js","node_modules/strip-ansi/index.js","node_modules/ansi-regex/index.js","week-6/index.ts","week-6/exercises/index.ts","week-6/exercises/exercise-01.ts","EOA-Functions/index.ts","EOA-Functions/spacer.ts","EOA-Functions/getInput.ts","week-6/exercises/exercise-02.ts","week-6/exercises/exercise-03.ts","week-6/exercises/exercise-04.ts","week-6/exercises/exercise-05.ts","week-6/exercises/exercise-06.ts"],"sourcesContent":["'use strict'\n\nvar fs = require('fs');\nvar stripAnsi = require('strip-ansi');\nvar term = 13; // carriage return\n\n/**\n * create -- sync function for reading user input from stdin\n * @param   {Object} config {\n *   sigint: {Boolean} exit on ^C\n *   autocomplete: {StringArray} function({String})\n *   history: {String} a history control object (see `prompt-sync-history`)\n * }\n * @returns {Function} prompt function\n */\n\n // for ANSI escape codes reference see https://en.wikipedia.org/wiki/ANSI_escape_code\n\nfunction create(config) {\n\n  config = config || {};\n  var sigint = config.sigint;\n  var eot = config.eot;\n  var autocomplete = config.autocomplete =\n    config.autocomplete || function(){return []};\n  var history = config.history;\n  prompt.history = history || {save: function(){}};\n  prompt.hide = function (ask) { return prompt(ask, {echo: ''}) };\n\n  return prompt;\n\n\n  /**\n   * prompt -- sync function for reading user input from stdin\n   *  @param {String} ask opening question/statement to prompt for\n   *  @param {String} value initial value for the prompt\n   *  @param   {Object} opts {\n   *   echo: set to a character to be echoed, default is '*'. Use '' for no echo\n   *   value: {String} initial value for the prompt\n   *   ask: {String} opening question/statement to prompt for, does not override ask param\n   *   autocomplete: {StringArray} function({String})\n   * }\n   *\n   * @returns {string} Returns the string input or (if sigint === false)\n   *                   null if user terminates with a ^C\n   */\n\n\n  function prompt(ask, value, opts) {\n    var insert = 0, savedinsert = 0, res, i, savedstr;\n    opts = opts || {};\n\n    if (Object(ask) === ask) {\n      opts = ask;\n      ask = opts.ask;\n    } else if (Object(value) === value) {\n      opts = value;\n      value = opts.value;\n    }\n    ask = ask || '';\n    var echo = opts.echo;\n    var masked = 'echo' in opts;\n    autocomplete = opts.autocomplete || autocomplete;\n\n    var fd = (process.platform === 'win32') ?\n      process.stdin.fd :\n      fs.openSync('/dev/tty', 'rs');\n\n    var wasRaw = process.stdin.isRaw;\n    if (!wasRaw) { process.stdin.setRawMode && process.stdin.setRawMode(true); }\n\n    var buf = Buffer.alloc(3);\n    var str = '', character, read;\n\n    savedstr = '';\n\n    if (ask) {\n      process.stdout.write(ask);\n    }\n\n    var cycle = 0;\n    var prevComplete;\n\n    while (true) {\n      read = fs.readSync(fd, buf, 0, 3);\n      if (read > 1) { // received a control sequence\n        switch(buf.toString()) {\n          case '\\u001b[A':  //up arrow\n            if (masked) break;\n            if (!history) break;\n            if (history.atStart()) break;\n\n            if (history.atEnd()) {\n              savedstr = str;\n              savedinsert = insert;\n            }\n            str = history.prev();\n            insert = str.length;\n            process.stdout.write('\\u001b[2K\\u001b[0G' + ask + str);\n            break;\n          case '\\u001b[B':  //down arrow\n            if (masked) break;\n            if (!history) break;\n            if (history.pastEnd()) break;\n\n            if (history.atPenultimate()) {\n              str = savedstr;\n              insert = savedinsert;\n              history.next();\n            } else {\n              str = history.next();\n              insert = str.length;\n            }\n            process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str + '\\u001b['+(insert+ask.length+1)+'G');\n            break;\n          case '\\u001b[D': //left arrow\n            if (masked) break;\n            var before = insert;\n            insert = (--insert < 0) ? 0 : insert;\n            if (before - insert)\n              process.stdout.write('\\u001b[1D');\n            break;\n          case '\\u001b[C': //right arrow\n            if (masked) break;\n            insert = (++insert > str.length) ? str.length : insert;\n            process.stdout.write('\\u001b[' + (insert+ask.length+1) + 'G');\n            break;\n          default:\n            if (buf.toString()) {\n              str = str + buf.toString();\n              str = str.replace(/\\0/g, '');\n              insert = str.length;\n              promptPrint(masked, ask, echo, str, insert);\n              process.stdout.write('\\u001b[' + (insert+ask.length+1) + 'G');\n              buf = Buffer.alloc(3);\n            }\n        }\n        continue; // any other 3 character sequence is ignored\n      }\n\n      // if it is not a control character seq, assume only one character is read\n      character = buf[read-1];\n\n      // catch a ^C and return null\n      if (character == 3){\n        process.stdout.write('^C\\n');\n        fs.closeSync(fd);\n\n        if (sigint) process.exit(130);\n\n        process.stdin.setRawMode && process.stdin.setRawMode(wasRaw);\n\n        return null;\n      }\n\n      // catch a ^D and exit\n      if (character == 4) {\n        if (str.length == 0 && eot) {\n          process.stdout.write('exit\\n');\n          process.exit(0);\n        }\n      }\n\n      // catch the terminating character\n      if (character == term) {\n        fs.closeSync(fd);\n        if (!history) break;\n        if (!masked && str.length) history.push(str);\n        history.reset();\n        break;\n      }\n\n      // catch a TAB and implement autocomplete\n      if (character == 9) { // TAB\n        res = autocomplete(str);\n\n        if (str == res[0]) {\n          res = autocomplete('');\n        } else {\n          prevComplete = res.length;\n        }\n\n        if (res.length == 0) {\n          process.stdout.write('\\t');\n          continue;\n        }\n\n        var item = res[cycle++] || res[cycle = 0, cycle++];\n\n        if (item) {\n          process.stdout.write('\\r\\u001b[K' + ask + item);\n          str = item;\n          insert = item.length;\n        }\n      }\n\n      if (character == 127 || (process.platform == 'win32' && character == 8)) { //backspace\n        if (!insert) continue;\n        str = str.slice(0, insert-1) + str.slice(insert);\n        insert--;\n        process.stdout.write('\\u001b[2D');\n      } else {\n        if ((character < 32 ) || (character > 126))\n            continue;\n        str = str.slice(0, insert) + String.fromCharCode(character) + str.slice(insert);\n        insert++;\n      };\n\n      promptPrint(masked, ask, echo, str, insert);\n\n    }\n\n    process.stdout.write('\\n')\n\n    process.stdin.setRawMode && process.stdin.setRawMode(wasRaw);\n\n    return str || value || '';\n  };\n\n\n  function promptPrint(masked, ask, echo, str, insert) {\n    if (masked) {\n        process.stdout.write('\\u001b[2K\\u001b[0G' + ask + Array(str.length+1).join(echo));\n    } else {\n      process.stdout.write('\\u001b[s');\n      if (insert == str.length) {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str);\n      } else {\n        if (ask) {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str);\n        } else {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ str + '\\u001b[' + (str.length - insert) + 'D');\n        }\n      }\n\n      // Reposition the cursor to the right of the insertion point\n      var askLength = stripAnsi(ask).length;\n      process.stdout.write(`\\u001b[${askLength+1+(echo==''? 0:insert)}G`);\n    }\n  }\n};\n\nmodule.exports = create;\n","'use strict';\nconst ansiRegex = require('ansi-regex');\n\nconst stripAnsi = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n\nmodule.exports = stripAnsi;\nmodule.exports.default = stripAnsi;\n","'use strict';\n\nmodule.exports = options => {\n\toptions = Object.assign({\n\t\tonlyFirst: false\n\t}, options);\n\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, options.onlyFirst ? undefined : 'g');\n};\n","import {\r\n  Exercise01,\r\n  Exercise02,\r\n  Exercise03,\r\n  Exercise04,\r\n  Exercise05,\r\n  Exercise06,\r\n} from \"./exercises/index\";\r\nimport { Spacer, getInput } from \"../EOA-Functions\";\r\n\r\nlet exercises: Array<{ name: string; exerciseFn: () => void }> = [\r\n  {\r\n    name: \"Calculate the sum of first n numbers using for loop\",\r\n    exerciseFn: () => Exercise01(),\r\n  },\r\n  {\r\n    name: \"Iterate thru an array & only print even numbers\",\r\n    exerciseFn: () => Exercise02(),\r\n  },\r\n  {\r\n    name: \"Iterate thru an array & remove even numbers from it\",\r\n    exerciseFn: () => Exercise03([22, 44, -55, -88, 11, 2, -5, -8, 200]),\r\n  },\r\n  { name: \"Calculate Area of Circle\", exerciseFn: () => Exercise04() },\r\n  {\r\n    name: \"Iterate thru a list of grades & remove if below 50\",\r\n    exerciseFn: () => Exercise05([24, 57, 62, 49, 91]),\r\n  },\r\n  {\r\n    name: \"Print the largest number in array\",\r\n    exerciseFn: () => Exercise06([24, 57, 62, 49, 91]),\r\n  },\r\n];\r\n\r\nconsole.log(`/************************/`);\r\nconsole.log(`Choose Exercise #`);\r\nconsole.log(`/************************/`);\r\n\r\nexercises.forEach((element, index) => {\r\n  Spacer();\r\n  console.log(`${index + 1} - ${element[\"name\"]}`);\r\n});\r\n\r\nSpacer();\r\nconsole.log(`e - Exit`);\r\n\r\nSpacer();\r\nlet exercise_no = getInput(\"Enter Exercise # to Run: \");\r\n\r\nlet runExerciseNo =\r\n  exercise_no == \"e\" || (exercise_no >= 1 && exercise_no <= exercises.length);\r\n\r\nwhile (runExerciseNo == false) {\r\n  exercise_no = getInput(\"Please Enter Exercise # to Run: \");\r\n}\r\n\r\nlet exitProgram = exercise_no == `e`;\r\n\r\nwhile (!exitProgram) {\r\n  console.log(`==================`);\r\n  console.log(`Exercise ${exercise_no}: ${exercises[exercise_no - 1].name}`);\r\n  console.log(`==================`);\r\n\r\n  Spacer();\r\n  exercises[exercise_no - 1].exerciseFn();\r\n\r\n  Spacer(2);\r\n\r\n  getInput(\"Press Enter to Continue...\");\r\n\r\n  Spacer();\r\n\r\n  console.log(`/************************/`);\r\n  console.log(`Choose Exercise #`);\r\n  console.log(`/************************/`);\r\n\r\n  exercises.forEach((element, index) => {\r\n    Spacer();\r\n    console.log(`${index + 1} - ${element[\"name\"]}`);\r\n  });\r\n\r\n  Spacer();\r\n  console.log(`e - Exit`);\r\n  exercise_no = getInput(\"Enter Exercise # to Run: \");\r\n  exitProgram = exercise_no == \"e\";\r\n}\r\n\r\nconsole.log(`Exit`);\r\nprocess.exit(0);\r\n","import Exercise01 from \"./exercise-01\";\r\nimport Exercise02 from \"./exercise-02\";\r\nimport Exercise03 from \"./exercise-03\";\r\nimport Exercise04 from \"./exercise-04\";\r\nimport Exercise05 from \"./exercise-05\";\r\nimport Exercise06 from \"./exercise-06\";\r\n\r\nexport {\r\n  Exercise01,\r\n  Exercise02,\r\n  Exercise03,\r\n  Exercise04,\r\n  Exercise05,\r\n  Exercise06,\r\n};\r\n","// Exercise 01: Develop a program that calculates and prints the sum of the first n numbers using for loop.\r\n\r\n// ============ getInput ============\r\n// Take Input from Console\r\n// getInput() also takes string for prompt message, but every keypress it re-prints the message in console,\r\n// so it's better to use console.log() to show prompt query\r\n\r\n// ============ Spacer ============\r\n// A custom function that takes an optional parameter as number to print empty console.log(),\r\n// if parameter is not specified it takes it as 1.\r\nimport { Spacer, getInput } from \"../../EOA-Functions/index\";\r\n\r\nconst Exercise01 = () => {\r\n  let number: number = +getInput(\"Enter an integer => \");\r\n  let isInt = false;\r\n  while (!isInt) {\r\n    if (Number.isInteger(number)) {\r\n      isInt = true;\r\n    } else {\r\n      number = getInput(\"Enter an integer => \");\r\n    }\r\n  }\r\n\r\n  let sum: number = 0;\r\n\r\n  for (\r\n    let i = 0;\r\n    number > 0 ? i <= number : i >= number;\r\n    number > 0 ? i++ : i--\r\n  ) {\r\n    if (i % 2 == 0) sum += i;\r\n  }\r\n\r\n  Spacer();\r\n\r\n  console.log(\r\n    `Sum of Even Numbers between ${number < 0 ? number : 0} and ${\r\n      number > 0 ? number : 0\r\n    } =>`\r\n  );\r\n  console.log(sum);\r\n};\r\n\r\n// TODO: Uncomment statement below to run function from this file\r\n// Exercise01();\r\n\r\nexport default Exercise01;\r\n","import Spacer from \"./spacer\";\r\nimport getInput from \"./getInput\";\r\n\r\nexport { Spacer, getInput };\r\n","const Spacer = (numOfSpaces?: number) => {\r\n  if (numOfSpaces == undefined) {\r\n    console.log();\r\n  } else {\r\n    for (let i = 1; i <= numOfSpaces; i++) {\r\n      console.log();\r\n    }\r\n  }\r\n};\r\n\r\nexport default Spacer;\r\n","const getInput = require(\"prompt-sync\")({ sigint: true });\r\n\r\nexport default getInput;\r\n","// Exercise 02: Implement a program that uses for loop to iterate through an array of numbers and print only the even numbers.\r\n\r\n// ============ getInput ============\r\n// Take Input from Console\r\n// getInput() also takes string for prompt message, but every keypress it re-prints the message in console,\r\n// so it's better to use console.log() to show prompt query\r\n\r\n// ============ Spacer ============\r\n// A custom function that takes an optional parameter as number to print empty console.log(),\r\n// if parameter is not specified it takes it as 1.\r\nimport { Spacer, getInput } from \"../../EOA-Functions/index\";\r\n\r\nconst Exercise02 = (array?: number[]) => {\r\n  // Display options\r\n  console.log(`Options => `);\r\n  console.log(`1 - Take Input Here`);\r\n  console.log(`2 - Use Pre-Defined Values`);\r\n\r\n  Spacer();\r\n\r\n  // any datatype is used because getInput returns a string that, in the next statement will convert to number using Number()\r\n  let choice: any = +getInput(\"Enter a choice => \");\r\n  let numArr: number[] = [];\r\n\r\n  // It checks whether choice is empty or out of range\r\n  while (choice == \"\" || choice < 1 || choice > 2) {\r\n    choice = +getInput(\"Please Enter Valid Choice => \");\r\n  }\r\n\r\n  // Choice: Taker User Input\r\n  if (choice == 1) {\r\n    console.log(`Enter Integers separated by single space =>`);\r\n\r\n    // Take user input as numbers separated by single space\r\n    // splits it to form an array\r\n    // pushing each item of that array to numArr array & converting item value to typeof Number\r\n    getInput()\r\n      .split(\" \")\r\n      .forEach((element: string) => {\r\n        if (!isNaN(Number(element))) {\r\n          numArr.push(Number(element));\r\n        }\r\n      });\r\n\r\n    // Uses while loop to detect empty input\r\n    // it keeps prompting until non-empty input is found.\r\n    while (numArr.length == 0) {\r\n      console.log(`Enter Integers separated by single space =>`);\r\n      getInput()\r\n        .split(\" \")\r\n        .forEach((element: string) => {\r\n          if (!isNaN(Number(element))) {\r\n            numArr.push(Number(element));\r\n          }\r\n        });\r\n    }\r\n  } else {\r\n    // Choice: Maker User Input\r\n\r\n    numArr = array!;\r\n  }\r\n\r\n  console.log(`Initial Array =>`);\r\n  console.log(numArr);\r\n\r\n  Spacer();\r\n  console.log(`Even Numbers:`);\r\n\r\n  for (let i = 0; i < numArr.length; i++) {\r\n    if (numArr[i] % 2 == 0) {\r\n      console.log(numArr[i]);\r\n    }\r\n  }\r\n};\r\n\r\n// TODO: Uncomment statement below to run function from this file\r\n// Exercise02([22, 44, -55, -88, 11, 2, -5, -8, 200]);\r\n\r\nexport default Exercise02;\r\n","// Exercise 03: Implement a program that uses a loop to iterate through an array of numbers and remove all the even numbers from them and just leave the odd ones.\r\n\r\n// ============ getInput ============\r\n// Take Input from Console\r\n// getInput() also takes string for prompt message, but every keypress it re-prints the message in console,\r\n// so it's better to use console.log() to show prompt query\r\nimport { getInput } from \"../../EOA-Functions/index\";\r\n\r\nconst Exercise03 = (array?: number[]) => {\r\n  console.log(`Options:`);\r\n  console.log(`1. Take Input Here`);\r\n  console.log(`2. Use Pre-Defined Values`);\r\n\r\n  let numArr: number[] = [];\r\n\r\n  let choice: number = +getInput(\"Choose Options (1-2) => \");\r\n\r\n  // checks whether choice is 1 or 2, if not. It re-execute the statements\r\n  while ([1, 2].indexOf(choice) == -1) {\r\n    choice = +getInput(\"Please Choose Options (1-2) => \");\r\n  }\r\n\r\n  // Take Input Here\r\n  if (choice == 1) {\r\n    console.log(`Enter Integers separated by single space =>`);\r\n\r\n    // Take user input as numbers separated by single space\r\n    // splits it to form an array\r\n    // pushing each item of that array to numArr array & converting item value to typeof Number\r\n    getInput()\r\n      .split(\" \")\r\n      .forEach((element: string) => {\r\n        if (!isNaN(Number(element))) {\r\n          numArr.push(Number(element));\r\n        }\r\n      });\r\n\r\n    // Uses while loop to detect empty input\r\n    // it keeps prompting until non-empty input is found.\r\n    while (numArr.length == 0) {\r\n      console.log(`Enter Integers separated by single space =>`);\r\n      getInput()\r\n        .split(\" \")\r\n        .forEach((element: string) => {\r\n          if (!isNaN(Number(element))) {\r\n            numArr.push(Number(element));\r\n          }\r\n        });\r\n    }\r\n  } else {\r\n    // generate ten random integers in values array\r\n    numArr = array!;\r\n  }\r\n\r\n  console.log(`Initial Array => `, numArr);\r\n\r\n  for (let i = 0; i < numArr.length; i++) {\r\n    if (numArr[i] % 2 == 0) {\r\n      numArr.splice(i, 1);\r\n      i--;\r\n    }\r\n  }\r\n\r\n  console.log(`Array w/o Even Numbers => `, numArr);\r\n};\r\n\r\n// TODO: Uncomment statement below to run function from this file\r\n// Exercise03([22, 44, -55, -88, 11, 2, -5, -8, 200]);\r\n\r\nexport default Exercise03;\r\n","// Write a program that defines a function to calculate the area of a circle. The function should take the radius as input and return the calculated area.\r\n\r\n// ============ getInput ============\r\n// Take Input from Console\r\n// getInput() also takes string for prompt message, but every keypress it re-prints the message in console,\r\n// so it's better to use console.log() to show prompt query\r\n\r\n// ============ Spacer ============\r\n// A custom function that takes an optional parameter as number to print empty console.log(),\r\n// if parameter is not specified it takes it as 1.\r\nimport { Spacer, getInput } from \"../../EOA-Functions/index\";\r\n\r\nconst Exercise04 = () => {\r\n  console.log(`Enter Radius to calculate area of circle =>`);\r\n  let radius: number = +getInput();\r\n\r\n  while (!isNaN(radius) && radius < 0) {\r\n    console.log(`Enter Valid Value =>`);\r\n    radius = +getInput();\r\n  }\r\n\r\n  let area: number = Number((Math.PI * radius * radius).toFixed(2));\r\n\r\n  Spacer();\r\n\r\n  console.log(`Area of Circle with radius ${radius} =>`, area);\r\n};\r\n\r\n// TODO: Uncomment statement below to run function from this file\r\n// Exercise04();\r\n\r\nexport default Exercise04;\r\n","// Develop a program that reads a list of grades and uses the splice method to remove failing grades (below 50) from the array.\r\n\r\n// ============ getInput ============\r\n// Take Input from Console\r\n// getInput() also takes string for prompt message, but every keypress it re-prints the message in console,\r\n// so it's better to use console.log() to show prompt query\r\n\r\n// ============ Spacer ============\r\n// A custom function that takes an optional parameter as number to print empty console.log(),\r\n// if parameter is not specified it takes it as 1.\r\nimport { Spacer, getInput } from \"../../EOA-Functions/index\";\r\n\r\nconst Exercise05 = (array?: number[]) => {\r\n  console.log(`Options:`);\r\n  console.log(`1. Take Input Here`);\r\n  console.log(`2. Use Pre-Defined Values`);\r\n\r\n  let grades: number[] = [];\r\n\r\n  let choice: number = +getInput(\"Choose Options (1-2) => \");\r\n\r\n  // checks whether choice is 1 or 2, if not. It re-execute the statements\r\n  while ([1, 2].indexOf(choice) == -1) {\r\n    choice = +getInput(\"Please Choose Options (1-2) => \");\r\n  }\r\n\r\n  // Take Input Here\r\n  if (choice == 1) {\r\n    console.log(`Enter Integers separated by single space =>`);\r\n\r\n    // Take user input as numbers separated by single space\r\n    // splits it to form an array\r\n    // pushing each item of that array to numArr array & converting item value to typeof Number\r\n    getInput()\r\n      .split(\" \")\r\n      .forEach((element: string) => {\r\n        if (!isNaN(Number(element))) {\r\n          grades.push(Number(element));\r\n        }\r\n      });\r\n\r\n    // Uses while loop to detect empty input\r\n    // it keeps prompting until non-empty input is found.\r\n    while (grades.length == 0) {\r\n      console.log(`Enter Integers separated by single space =>`);\r\n      getInput()\r\n        .split(\" \")\r\n        .forEach((element: string) => {\r\n          if (!isNaN(Number(element))) {\r\n            grades.push(Number(element));\r\n          }\r\n        });\r\n    }\r\n  } else {\r\n    // generate ten random integers in values array\r\n    grades = array!;\r\n  }\r\n\r\n  Spacer();\r\n\r\n  console.log(`All Grades => `, grades);\r\n\r\n  for (let i = 0; i < grades.length; i++) {\r\n    if (grades[i] < 50) {\r\n      grades.splice(i, 1);\r\n      i--;\r\n    }\r\n  }\r\n\r\n  console.log(`Passed Grades => `, grades);\r\n};\r\n\r\n// TODO: Uncomment statement below to run function from this file\r\n// Exercise05([24, 57, 62, 49, 91]);\r\n\r\nexport default Exercise05;\r\n","// Develop a program that reads a list of grades and uses the splice method to remove failing grades (below 50) from the array.\r\n\r\n// ============ getInput ============\r\n// Take Input from Console\r\n// getInput() also takes string for prompt message, but every keypress it re-prints the message in console,\r\n// so it's better to use console.log() to show prompt query\r\n\r\n// ============ Spacer ============\r\n// A custom function that takes an optional parameter as number to print empty console.log(),\r\n// if parameter is not specified it takes it as 1.\r\nimport { Spacer, getInput } from \"../../EOA-Functions/index\";\r\n\r\nconst Exercise06 = (array?: number[]) => {\r\n  console.log(`Options:`);\r\n  console.log(`1. Take Input Here`);\r\n  console.log(`2. Use Pre-Defined Values`);\r\n\r\n  let values: number[] = [];\r\n\r\n  let choice: number = +getInput(\"Choose Options (1-2) => \");\r\n\r\n  // checks whether choice is 1 or 2, if not. It re-execute the statements\r\n  while ([1, 2].indexOf(choice) == -1) {\r\n    choice = +getInput(\"Please Choose Options (1-2) => \");\r\n  }\r\n\r\n  // Take Input Here\r\n  if (choice == 1) {\r\n    console.log(`Enter Values separated by single space =>`);\r\n\r\n    // Take user input as numbers separated by single space\r\n    // splits it to form an array\r\n    // pushing each item of that array to numArr array & converting item value to typeof Number\r\n    getInput()\r\n      .split(\" \")\r\n      .forEach((element: string) => {\r\n        if (!isNaN(Number(element))) {\r\n          values.push(Number(element));\r\n        }\r\n      });\r\n\r\n    // Uses while loop to detect empty input\r\n    // it keeps prompting until non-empty input is found.\r\n    while (values.length == 0) {\r\n      console.log(`Enter Integers separated by single space =>`);\r\n      getInput()\r\n        .split(\" \")\r\n        .forEach((element: string) => {\r\n          if (!isNaN(Number(element))) {\r\n            values.push(Number(element));\r\n          }\r\n        });\r\n    }\r\n  } else {\r\n    // generate ten random integers in values array\r\n    values = array!;\r\n  }\r\n\r\n  Spacer();\r\n\r\n  // console.log(`All Grades => `, values);\r\n\r\n  // for (let i = 0; i < values.length; i++) {\r\n  //   if (values[i] < 50) {\r\n  //     values.splice(i, 1);\r\n  //     i--;\r\n  //   }\r\n  // }\r\n\r\n  // console.log(`Passed Grades => `, values);\r\n\r\n  console.log(`All Values =>`, values);\r\n\r\n  console.log(`Largest Number in list => ${Math.max(...values)}`);\r\n};\r\n\r\n// TODO: Uncomment statement below to run function from this file\r\n// Exercise06([24, 57, 62, 49, 91]);\r\n\r\nexport default Exercise06;\r\n"],"names":[],"version":3,"file":"index.js.map"}